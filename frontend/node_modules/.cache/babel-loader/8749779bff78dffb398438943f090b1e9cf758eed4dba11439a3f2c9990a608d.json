{"ast":null,"code":"const handleUpload = async () => {\n  if (!file) {\n    setError('Please select a file first');\n    return;\n  }\n  setLoading(true);\n  setError(null);\n  setUploadSuccess(false);\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData,\n      // Add these headers\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n\n    // Read the response text first\n    const responseText = await response.text();\n    let data;\n    try {\n      // Try to parse it as JSON\n      data = JSON.parse(responseText);\n    } catch (e) {\n      console.error('Failed to parse response:', responseText);\n      throw new Error('Invalid response from server');\n    }\n    if (!response.ok) {\n      throw new Error(data.error || 'Upload failed');\n    }\n    setUploadSuccess(true);\n    console.log('Upload successful:', data.url);\n\n    // Clear the form after successful upload if desired\n    clearFile();\n  } catch (err) {\n    console.error('Upload error:', err);\n    setError(err.message || 'An error occurred during upload');\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["handleUpload","file","setError","setLoading","setUploadSuccess","formData","FormData","append","response","fetch","method","body","headers","responseText","text","data","JSON","parse","e","console","error","Error","ok","log","url","clearFile","err","message"],"sources":["/Users/24hrsnapcook/Desktop/Networking_App_Full_Stack_Deploy/frontend/src/ImageUpload.js"],"sourcesContent":["const handleUpload = async () => {\n  if (!file) {\n    setError('Please select a file first');\n    return;\n  }\n\n  setLoading(true);\n  setError(null);\n  setUploadSuccess(false);\n\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData,\n      // Add these headers\n      headers: {\n        'Accept': 'application/json',\n      },\n    });\n\n    // Read the response text first\n    const responseText = await response.text();\n    let data;\n    \n    try {\n      // Try to parse it as JSON\n      data = JSON.parse(responseText);\n    } catch (e) {\n      console.error('Failed to parse response:', responseText);\n      throw new Error('Invalid response from server');\n    }\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Upload failed');\n    }\n\n    setUploadSuccess(true);\n    console.log('Upload successful:', data.url);\n    \n    // Clear the form after successful upload if desired\n    clearFile();\n    \n  } catch (err) {\n    console.error('Upload error:', err);\n    setError(err.message || 'An error occurred during upload');\n  } finally {\n    setLoading(false);\n  }\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI,CAACC,IAAI,EAAE;IACTC,QAAQ,CAAC,4BAA4B,CAAC;IACtC;EACF;EAEAC,UAAU,CAAC,IAAI,CAAC;EAChBD,QAAQ,CAAC,IAAI,CAAC;EACdE,gBAAgB,CAAC,KAAK,CAAC;EAEvB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN,QAAQ;MACd;MACAO,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC1C,IAAIC,IAAI;IAER,IAAI;MACF;MACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;IACjC,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEP,YAAY,CAAC;MACxD,MAAM,IAAIQ,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,IAAI,CAACb,QAAQ,CAACc,EAAE,EAAE;MAChB,MAAM,IAAID,KAAK,CAACN,IAAI,CAACK,KAAK,IAAI,eAAe,CAAC;IAChD;IAEAhB,gBAAgB,CAAC,IAAI,CAAC;IACtBe,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAER,IAAI,CAACS,GAAG,CAAC;;IAE3C;IACAC,SAAS,CAAC,CAAC;EAEb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZP,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEM,GAAG,CAAC;IACnCxB,QAAQ,CAACwB,GAAG,CAACC,OAAO,IAAI,iCAAiC,CAAC;EAC5D,CAAC,SAAS;IACRxB,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}